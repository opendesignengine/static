Index: libs/Bounce2/library.properties
===================================================================
--- libs/Bounce2/library.properties	(revision 0)
+++ libs/Bounce2/library.properties	(revision 46)
@@ -0,0 +1,9 @@
+name=Bounce2
+version=2.21
+author=Thomas O Fredericks <tof@t-o-f.info> with contributions fromEric Lowry, Jim Schimpf and Tom Harkaway
+maintainer=Thomas O Fredericks <tof@t-o-f.info>
+sentence=Debouncing library for Arduino and Wiring.
+paragraph=Deboucing switches and toggles is important.
+category=Signal Input/Output
+url=https://github.com/thomasfredericks/Bounce2
+architectures=*
\ No newline at end of file
Index: libs/Bounce2/LICENSE
===================================================================
--- libs/Bounce2/LICENSE	(revision 0)
+++ libs/Bounce2/LICENSE	(revision 46)
@@ -0,0 +1,20 @@
+The MIT License (MIT)
+
+Copyright (c) 2013 thomasfredericks
+
+Permission is hereby granted, free of charge, to any person obtaining a copy of
+this software and associated documentation files (the "Software"), to deal in
+the Software without restriction, including without limitation the rights to
+use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
+the Software, and to permit persons to whom the Software is furnished to do so,
+subject to the following conditions:
+
+The above copyright notice and this permission notice shall be included in all
+copies or substantial portions of the Software.
+
+THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
Index: libs/Bounce2/Bounce2.h
===================================================================
--- libs/Bounce2/Bounce2.h	(revision 0)
+++ libs/Bounce2/Bounce2.h	(revision 46)
@@ -0,0 +1,88 @@
+/*
+  The MIT License (MIT)
+
+  Copyright (c) 2013 thomasfredericks
+
+  Permission is hereby granted, free of charge, to any person obtaining a copy of
+  this software and associated documentation files (the "Software"), to deal in
+  the Software without restriction, including without limitation the rights to
+  use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
+  the Software, and to permit persons to whom the Software is furnished to do so,
+  subject to the following conditions:
+
+  The above copyright notice and this permission notice shall be included in all
+  copies or substantial portions of the Software.
+
+  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+  FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+  COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+  IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+*/
+
+/* * * * * * * * * * * * * * * * * * * * * * * * * * * *
+  Main code by Thomas O Fredericks (tof@t-o-f.info)
+  Previous contributions by Eric Lowry, Jim Schimpf and Tom Harkaway
+  * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
+
+#ifndef Bounce2_h
+#define Bounce2_h
+
+// Uncomment the following line for "LOCK-OUT" debounce method
+//#define BOUNCE_LOCK_OUT
+
+// Uncomment the following line for "BOUNCE_WITH_PROMPT_DETECTION" debounce method
+//#define BOUNCE_WITH_PROMPT_DETECTION
+
+#include <inttypes.h>
+
+#ifndef _BV
+#define _BV(n) (1<<(n))
+#endif
+
+class Bounce
+{
+ public:
+    // Create an instance of the bounce library
+    Bounce();
+
+    // Attach to a pin (and also sets initial state)
+    void attach(int pin);
+    
+    // Attach to a pin (and also sets initial state) and sets pin to mode (INPUT/INPUT_PULLUP/OUTPUT)
+    void attach(int pin, int mode);
+
+    // Sets the debounce interval
+    void interval(uint16_t interval_millis);
+
+    // Updates the pin
+    // Returns 1 if the state changed
+    // Returns 0 if the state did not change
+    bool update();
+
+    // Returns the updated pin state
+    bool read();
+
+    // Returns the falling pin state
+    bool fell();
+
+    // Returns the rising pin state
+    bool rose();
+
+    // Partial compatibility for programs written with Bounce version 1
+    bool risingEdge() { return rose(); }
+    bool fallingEdge() { return fell(); }
+    Bounce(uint8_t pin, unsigned long interval_millis ) : Bounce() {
+        attach(pin);
+        interval(interval_millis);
+    }
+
+ protected:
+    unsigned long previous_millis;
+    uint16_t interval_millis;
+    uint8_t state;
+    uint8_t pin;
+};
+
+#endif
Index: libs/Bounce2/BouncySwitch_lockout.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: libs/Bounce2/BouncySwitch_lockout.png
===================================================================
--- libs/Bounce2/BouncySwitch_lockout.png	(revision 45)
+++ libs/Bounce2/BouncySwitch_lockout.png	(revision 46)

Property changes on: libs/Bounce2/BouncySwitch_lockout.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: libs/Bounce2/INSTALL.txt
===================================================================
--- libs/Bounce2/INSTALL.txt	(revision 0)
+++ libs/Bounce2/INSTALL.txt	(revision 46)
@@ -0,0 +1 @@
+Put the "Bounce2" folder in your Arduino or Wiring "libraries" folder. 
Index: libs/Bounce2/.gitignore
===================================================================
--- libs/Bounce2/.gitignore	(revision 0)
+++ libs/Bounce2/.gitignore	(revision 46)
@@ -0,0 +1 @@
+*.db
\ No newline at end of file
Index: libs/Bounce2/keywords.txt
===================================================================
--- libs/Bounce2/keywords.txt	(revision 0)
+++ libs/Bounce2/keywords.txt	(revision 46)
@@ -0,0 +1,29 @@
+#######################################
+# Syntax Coloring Map For Bounce2
+#######################################
+
+#######################################
+# Datatypes (KEYWORD1)
+#######################################
+
+Bounce	 KEYWORD1
+
+#######################################
+# Methods and Functions (KEYWORD2)
+#######################################
+
+update	 KEYWORD2
+interval	 KEYWORD2
+read	 KEYWORD2
+attach	 KEYWORD2
+rose	KEYWORD2
+fell	KEYWORD2
+
+#######################################
+# Instances (KEYWORD2)
+#######################################
+
+#######################################
+# Constants (LITERAL1)
+#######################################
+
Index: libs/Bounce2/README.md
===================================================================
--- libs/Bounce2/README.md	(revision 0)
+++ libs/Bounce2/README.md	(revision 46)
@@ -0,0 +1,37 @@
+BOUNCE 2
+=====================
+
+Debouncing library for Arduino or Wiring
+
+by Thomas Ouellet Fredericks
+
+with contributions from:
+
+Eric Lowry, Jim Schimpf and Tom Harkaway
+
+
+HAVE A QUESTION?
+=====================
+Please post your questions here :
+http://forum.arduino.cc/index.php?topic=266132.0
+
+DOWNLOAD
+=====================
+
+Download the latest version (version 2) here :
+
+https://github.com/thomasfredericks/Bounce2/archive/master.zip
+
+
+DOCUMENTATION
+=====================
+
+The latest version (version 2) documentation can be found here : 
+
+https://github.com/thomasfredericks/Bounce2/wiki
+
+
+ABOUT BOUNCE 1 (ORIGINAL VERSION)
+=====================
+
+The original version of Bounce (Bounce 1) is included but not supported anymore.
Index: libs/Bounce2/library.json
===================================================================
--- libs/Bounce2/library.json	(revision 0)
+++ libs/Bounce2/library.json	(revision 46)
@@ -0,0 +1,16 @@
+{
+  "name": "Bounce2",
+  "keywords": "bounce, signal, input, ouput",
+  "description": "Debouncing library for Arduino or Wiring",
+  "repository": {
+    "type": "git",
+    "url": "https://github.com/thomasfredericks/Bounce2.git"
+  },
+  "version": "2.1",
+  "exclude": [
+    "*.png",
+    "*.zip"
+  ],
+  "frameworks": "arduino",
+  "platforms": "*"
+}
Index: libs/Bounce2/Bounce1.zip
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: libs/Bounce2/Bounce1.zip
===================================================================
--- libs/Bounce2/Bounce1.zip	(revision 45)
+++ libs/Bounce2/Bounce1.zip	(revision 46)

Property changes on: libs/Bounce2/Bounce1.zip
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: libs/Bounce2/Bounce2.cpp
===================================================================
--- libs/Bounce2/Bounce2.cpp	(revision 0)
+++ libs/Bounce2/Bounce2.cpp	(revision 46)
@@ -0,0 +1,127 @@
+// Please read Bounce2.h for information about the liscence and authors
+
+#if defined(ARDUINO) && ARDUINO >= 100
+#include "Arduino.h"
+#else
+#include "WProgram.h"
+#endif
+#include "Bounce2.h"
+
+#define DEBOUNCED_STATE 0
+#define UNSTABLE_STATE  1
+#define STATE_CHANGED   3
+
+
+Bounce::Bounce()
+    : previous_millis(0)
+    , interval_millis(10)
+    , state(0)
+    , pin(0)
+{}
+
+void Bounce::attach(int pin) {
+    this->pin = pin;
+    state = 0;
+    if (digitalRead(pin)) {
+        state = _BV(DEBOUNCED_STATE) | _BV(UNSTABLE_STATE);
+    }
+#ifdef BOUNCE_LOCK_OUT
+    previous_millis = 0;
+#else
+    previous_millis = millis();
+#endif
+}
+
+void Bounce::attach(int pin, int mode){
+  pinMode(pin, mode);
+  
+  this->attach(pin);
+}
+
+void Bounce::interval(uint16_t interval_millis)
+{
+    this->interval_millis = interval_millis;
+}
+
+bool Bounce::update()
+{
+#ifdef BOUNCE_LOCK_OUT
+    state &= ~_BV(STATE_CHANGED);
+    // Ignore everything if we are locked out
+    if (millis() - previous_millis >= interval_millis) {
+        bool currentState = digitalRead(pin);
+        if ((bool)(state & _BV(DEBOUNCED_STATE)) != currentState) {
+            previous_millis = millis();
+            state ^= _BV(DEBOUNCED_STATE);
+            state |= _BV(STATE_CHANGED);
+        }
+    }
+    return state & _BV(STATE_CHANGED);
+
+#elif defined BOUNCE_WITH_PROMPT_DETECTION
+    // Read the state of the switch port into a temporary variable.
+    bool readState = digitalRead(pin);
+
+    // Clear Changed State Flag - will be reset if we confirm a button state change.
+    state &= ~_BV(STATE_CHANGED);
+
+    if ( readState != (bool)(state & _BV(DEBOUNCED_STATE))) {
+      // We have seen a change from the current button state.
+
+      if ( millis() - previous_millis >= interval_millis ) {
+	// We have passed the time threshold, so a new change of state is allowed.
+	// set the STATE_CHANGED flag and the new DEBOUNCED_STATE.
+	// This will be prompt as long as there has been greater than interval_misllis ms since last change of input.
+	// Otherwise debounced state will not change again until bouncing is stable for the timeout period.
+	state ^= _BV(DEBOUNCED_STATE);
+	state |= _BV(STATE_CHANGED);
+      }
+    }
+
+    // If the readState is different from previous readState, reset the debounce timer - as input is still unstable
+    // and we want to prevent new button state changes until the previous one has remained stable for the timeout.
+    if ( readState != (bool)(state & _BV(UNSTABLE_STATE)) ) {
+	// Update Unstable Bit to macth readState
+        state ^= _BV(UNSTABLE_STATE);
+        previous_millis = millis();
+    }
+    // return just the sate changed bit
+    return state & _BV(STATE_CHANGED);
+#else
+    // Read the state of the switch in a temporary variable.
+    bool currentState = digitalRead(pin);
+    state &= ~_BV(STATE_CHANGED);
+
+    // If the reading is different from last reading, reset the debounce counter
+    if ( currentState != (bool)(state & _BV(UNSTABLE_STATE)) ) {
+        previous_millis = millis();
+        state ^= _BV(UNSTABLE_STATE);
+    } else
+        if ( millis() - previous_millis >= interval_millis ) {
+            // We have passed the threshold time, so the input is now stable
+            // If it is different from last state, set the STATE_CHANGED flag
+            if ((bool)(state & _BV(DEBOUNCED_STATE)) != currentState) {
+                previous_millis = millis();
+                state ^= _BV(DEBOUNCED_STATE);
+                state |= _BV(STATE_CHANGED);
+            }
+        }
+
+    return state & _BV(STATE_CHANGED);
+#endif
+}
+
+bool Bounce::read()
+{
+    return state & _BV(DEBOUNCED_STATE);
+}
+
+bool Bounce::rose()
+{
+    return ( state & _BV(DEBOUNCED_STATE) ) && ( state & _BV(STATE_CHANGED));
+}
+
+bool Bounce::fell()
+{
+    return !( state & _BV(DEBOUNCED_STATE) ) && ( state & _BV(STATE_CHANGED));
+}
Index: libs/Bounce2/BouncySwitch_stable.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: libs/Bounce2/BouncySwitch_stable.png
===================================================================
--- libs/Bounce2/BouncySwitch_stable.png	(revision 45)
+++ libs/Bounce2/BouncySwitch_stable.png	(revision 46)

Property changes on: libs/Bounce2/BouncySwitch_stable.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: libs/Bounce2/examples/change/change.ino
===================================================================
--- libs/Bounce2/examples/change/change.ino	(revision 0)
+++ libs/Bounce2/examples/change/change.ino	(revision 46)
@@ -0,0 +1,48 @@
+
+// Detect the falling edge
+
+// Include the Bounce2 library found here :
+// https://github.com/thomasfredericks/Bounce-Arduino-Wiring
+#include <Bounce2.h>
+
+
+#define BUTTON_PIN 2
+#define LED_PIN 13
+
+int ledState = LOW;
+
+
+// Instantiate a Bounce object :
+Bounce debouncer = Bounce(); 
+
+void setup() {
+  
+  // Setup the button with an internal pull-up :
+  pinMode(BUTTON_PIN,INPUT_PULLUP);
+  
+  // After setting up the button, setup the Bounce instance :
+  debouncer.attach(BUTTON_PIN);
+  debouncer.interval(500);
+  
+  // Setup the LED :
+  pinMode(LED_PIN,OUTPUT);
+  digitalWrite(LED_PIN,ledState);
+ 
+  
+}
+
+void loop() {
+
+  // Update the Bounce instance :
+   debouncer.update();
+   
+   // Call code if Bounce fell (transition from HIGH to LOW) :
+   if ( debouncer.fell() ) {
+      
+     // Toggle LED state :
+     ledState = !ledState;
+     digitalWrite(LED_PIN,ledState);
+     
+   }
+}
+
Index: libs/Bounce2/examples/duration/duration.ino
===================================================================
--- libs/Bounce2/examples/duration/duration.ino	(revision 0)
+++ libs/Bounce2/examples/duration/duration.ino	(revision 46)
@@ -0,0 +1,53 @@
+/* 
+DESCRIPTION
+====================
+Reports through serial (57600 baud) the time since 
+a button press (transition from HIGH to LOW).
+
+*/
+
+// Include the Bounce2 library found here :
+// https://github.com/thomasfredericks/Bounce-Arduino-Wiring
+#include <Bounce2.h>
+
+
+#define BUTTON_PIN 2
+#define LED_PIN 13
+
+// Instantiate a Bounce object :
+Bounce debouncer = Bounce(); 
+
+unsigned long buttonPressTimeStamp;
+
+void setup() {
+  
+  Serial.begin(57600);
+  
+  // Setup the button with an internal pull-up :
+  pinMode(BUTTON_PIN,INPUT_PULLUP);
+  
+  // After setting up the button, setup the Bounce instance :
+  debouncer.attach(BUTTON_PIN);
+  debouncer.interval(5);
+  
+  // Setup the LED :
+  pinMode(LED_PIN,OUTPUT);
+  
+}
+
+void loop() {
+  
+   // Update the Bounce instance :
+  debouncer.update();
+
+  // Call code if Bounce fell (transition from HIGH to LOW) :
+  if ( debouncer.fell()  ) {;
+  
+    Serial.println( millis()-buttonPressTimeStamp );
+     buttonPressTimeStamp = millis();
+  
+  }
+  
+
+}
+
Index: libs/Bounce2/examples/retrigger/retrigger.ino
===================================================================
--- libs/Bounce2/examples/retrigger/retrigger.ino	(revision 0)
+++ libs/Bounce2/examples/retrigger/retrigger.ino	(revision 46)
@@ -0,0 +1,86 @@
+
+/* 
+DESCRIPTION
+====================
+Example of the bounce library that shows how to retrigger an event when a button is held down.
+In this case, the debug LED will blink every 500 ms as long as the button is held down.
+Open the Serial Monitor (57600 baud) for debug messages.
+
+*/
+
+// Include the Bounce2 library found here :
+// https://github.com/thomasfredericks/Bounce-Arduino-Wiring
+#include <Bounce2.h>
+
+
+#define BUTTON_PIN 2
+#define LED_PIN 13
+
+// Instantiate a Bounce object
+Bounce debouncer = Bounce(); 
+
+int buttonState;
+unsigned long buttonPressTimeStamp;
+
+int ledState;
+
+void setup() {
+  
+  Serial.begin(57600);
+  
+  // Setup the button
+  pinMode(BUTTON_PIN,INPUT);
+  // Activate internal pull-up
+  digitalWrite(BUTTON_PIN,HIGH);
+  
+  // After setting up the button, setup debouncer
+  debouncer.attach(BUTTON_PIN);
+  debouncer.interval(5);
+  
+  //Setup the LED
+  pinMode(LED_PIN,OUTPUT);
+  digitalWrite(LED_PIN,ledState);
+  
+}
+
+void loop() {
+ // Update the debouncer and get the changed state
+  boolean changed = debouncer.update();
+
+
+  
+  if ( changed ) {
+       // Get the update value
+     int value = debouncer.read();
+    if ( value == HIGH) {
+       ledState = LOW;
+       digitalWrite(LED_PIN, ledState );
+   
+       buttonState = 0;
+       Serial.println("Button released (state 0)");
+   
+   } else {
+          ledState = HIGH;
+       digitalWrite(LED_PIN, ledState );
+       
+         buttonState = 1;
+         Serial.println("Button pressed (state 1)");
+         buttonPressTimeStamp = millis();
+     
+   }
+  }
+  
+  if  ( buttonState == 1 ) {
+    if ( millis() - buttonPressTimeStamp >= 500 ) {
+         buttonPressTimeStamp = millis();
+         if ( ledState == HIGH ) ledState = LOW;
+         else if ( ledState == LOW ) ledState = HIGH;
+         digitalWrite(LED_PIN, ledState );
+        Serial.println("Retriggering button");
+    }
+  }
+ 
+ 
+}
+
+
Index: libs/Bounce2/examples/bounce/bounce.ino
===================================================================
--- libs/Bounce2/examples/bounce/bounce.ino	(revision 0)
+++ libs/Bounce2/examples/bounce/bounce.ino	(revision 46)
@@ -0,0 +1,48 @@
+
+/* 
+ DESCRIPTION
+ ====================
+ Simple example of the Bounce library that switches the debug LED when a button is pressed.
+ */
+// Include the Bounce2 library found here :
+// https://github.com/thomasfredericks/Bounce-Arduino-Wiring
+#include <Bounce2.h>
+
+#define BUTTON_PIN 2
+#define LED_PIN 13
+
+// Instantiate a Bounce object
+Bounce debouncer = Bounce(); 
+
+void setup() {
+
+  // Setup the button with an internal pull-up :
+  pinMode(BUTTON_PIN,INPUT_PULLUP);
+
+  // After setting up the button, setup the Bounce instance :
+  debouncer.attach(BUTTON_PIN);
+  debouncer.interval(5); // interval in ms
+
+  //Setup the LED :
+  pinMode(LED_PIN,OUTPUT);
+
+}
+
+void loop() {
+  // Update the Bounce instance :
+  debouncer.update();
+
+  // Get the updated value :
+  int value = debouncer.read();
+
+  // Turn on or off the LED as determined by the state :
+  if ( value == LOW ) {
+    digitalWrite(LED_PIN, HIGH );
+  } 
+  else {
+    digitalWrite(LED_PIN, LOW );
+  }
+
+}
+
+
Index: libs/Bounce2/examples/bounce2buttons/bounce2buttons.ino
===================================================================
--- libs/Bounce2/examples/bounce2buttons/bounce2buttons.ino	(revision 0)
+++ libs/Bounce2/examples/bounce2buttons/bounce2buttons.ino	(revision 46)
@@ -0,0 +1,64 @@
+
+/* 
+ DESCRIPTION
+ ====================
+ Simple example of the Bounce library that switches the debug LED when 
+ either of 2 buttons are pressed.
+ */
+ 
+// Include the Bounce2 library found here :
+// https://github.com/thomasfredericks/Bounce2
+#include <Bounce2.h>
+
+#define BUTTON_PIN_1 2
+#define BUTTON_PIN_2 3
+
+
+#define LED_PIN 13
+
+// Instantiate a Bounce object
+Bounce debouncer1 = Bounce(); 
+
+// Instantiate another Bounce object
+Bounce debouncer2 = Bounce(); 
+
+void setup() {
+
+  // Setup the first button with an internal pull-up :
+  pinMode(BUTTON_PIN_1,INPUT_PULLUP);
+  // After setting up the button, setup the Bounce instance :
+  debouncer1.attach(BUTTON_PIN_1);
+  debouncer1.interval(5); // interval in ms
+  
+   // Setup the second button with an internal pull-up :
+  pinMode(BUTTON_PIN_2,INPUT_PULLUP);
+  // After setting up the button, setup the Bounce instance :
+  debouncer2.attach(BUTTON_PIN_2);
+  debouncer2.interval(5); // interval in ms
+
+
+  //Setup the LED :
+  pinMode(LED_PIN,OUTPUT);
+
+}
+
+void loop() {
+  // Update the Bounce instances :
+  debouncer1.update();
+  debouncer2.update();
+
+  // Get the updated value :
+  int value1 = debouncer1.read();
+  int value2 = debouncer2.read();
+
+  // Turn on the LED if either button is pressed :
+  if ( value1 == LOW || value2 == LOW ) {
+    digitalWrite(LED_PIN, HIGH );
+  } 
+  else {
+    digitalWrite(LED_PIN, LOW );
+  }
+
+}
+
+
Index: libs/Bounce2/examples/circuit-bounce-change-duration-retrigger.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: libs/Bounce2/examples/circuit-bounce-change-duration-retrigger.png
===================================================================
--- libs/Bounce2/examples/circuit-bounce-change-duration-retrigger.png	(revision 45)
+++ libs/Bounce2/examples/circuit-bounce-change-duration-retrigger.png	(revision 46)

Property changes on: libs/Bounce2/examples/circuit-bounce-change-duration-retrigger.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
